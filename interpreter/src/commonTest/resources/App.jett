import this/Lexer.lex
import this/Parser.parse
import this/Checker.checkModule
import this/Checker.Scope
import this/Ast.AstModule
import this/Ast.AstFile

fun main(args: List[String]): Scope = {
  val srcDir = File.from(args.get(0));
  val files = srcDir.walkFiles();
  val srcFiles = files.filter({ file => file.extension() == 'jett' });

  val files = srcFiles.fold(Map.of(), { sum, next =>
    val raw = next.readText()
    val fullPath = next.path()
    val modulePath = next.relativePath(srcDir)
    val lexed = lex(fullPath, raw)
    val parsed = parse(modulePath, lexed)

    sum.set(modulePath, parsed)
  });

  val module = AstModule { files }

  val checker = checkModule(module)

  checker.forEach({pair =>
    val (scope) = pair;

    scope.parent.typeDefs.entries().forEach({ defPair =>
      val (qualified, type) = defPair;

      println("${qualified.path} => ${type}")
    })
  });

  return checker;
}

import this/Type.PrimitiveType
import this/Type.AtomType
import this/Type.DataType
import this/Type.ProtocolType
import this/Type.FunctionType
import this/Type.TupleType
import this/Type.GenericType
import this/Type.UnknownType
import this/Type.NamedType
import this/Type.PlaceholderType
import this/Type.UnionType
import this/Type.IntersectionType
import this/Type.CharType
import this/Type.StringType
import this/Type.IntType
import this/Type.FloatType
import this/Type.BooleanType
import this/Type.AnyType
import this/Type.NullType
import this/Type.UnitType
import this/Type.NothingType
import this/Type.VarArgsType
import this/Type.Type
import this/Type.VarArgsType
import this/Type.makeUnionType
import this/Type.makeIntersectionType
import this/Type.listOfType
import this/Type.stringTemplateType
import this/Type.QualifiedType

import this/Ast.IdentifierExp
import this/Ast.BinaryOpExp
import this/Ast.CallExp
import this/Ast.Expression

import this/Lexer.Position

import this/Sweeper.Scope

val listOfQualified: QualifiedType = QualifiedType { org: 'core', module: 'core', path: List.of('List', 'of') }

fun listOfCall(arguments: List[Expression], type: Type, pos: Position): CallExp = CallExp {
  func: BinaryOpExp{ op: '.', left: IdentifierExp{ name: 'List', type: listOfQualified, pos }, right: IdentifierExp{ name: 'of', pos, type: UnknownType } },
  arguments,
  pos,
  type
}

val listType: DataType = DataType { name: "List", fields: Map.of( ("size", IntType) ), typeParams: List.of(PlaceholderType{name: "Item"}) }
val setType: DataType = DataType { name: "Set", fields: Map.of( ("size", IntType) ), typeParams: List.of(PlaceholderType{name: "Item"}) }
val mapType: DataType = DataType { name: "Map", fields: Map.of( ("size", IntType) ), typeParams: List.of(PlaceholderType{name: "Key"}, PlaceholderType{name: "Value"}) }

fun coreType(name: String): QualifiedType = {
  return QualifiedType { org: 'core', module: 'core', path: List.of(name) };
}

fun initCoreScope(): Scope = Scope {
  parent: null,
  typeDefs: Map.of()
    .set(coreType("List"), listType)
    .set(coreType("Set"), setType)
    .set(coreType("Map"), mapType)
    .set(coreType("Char"), CharType)
    .set(coreType("String"), StringType)
    .set(coreType("Int"), IntType)
    .set(coreType("Float"), FloatType)
    .set(coreType("Boolean"), BooleanType)
    .set(coreType("Unit"), UnitType)
    .set(coreType("Nothing"), NothingType),
  types: Map.of()
    .set("List", coreType("List"))
    .set("Set", coreType("Set"))
    .set("Map", coreType("Map"))
    .set("Char", coreType("Char"))
    .set("String", coreType("String"))
    .set("Int", coreType("Int"))
    .set("Float", coreType("Float"))
    .set("Boolean", coreType("Boolean"))
    .set("Unit", coreType("Unit"))
    .set("Nothing", coreType("Nothing")),
  values: Map.of(),
  methods: Map.of(),
  protocols: Map.of(),
  protocolImpls: Map.of()
}





private val escapes = Map.of()
  .set(char"\\", char"\\")
  .set(char't', char'\t')
  .set(char'r', char'\r')
  .set(char'n', char'\n')
  .set(char's', char' ')
  .set(char'\$', char'\$')
  .set(char "'", char"'")
  .set(char '"', char'"')
  .set(char '`', char'`')


data StringCursor = { raw: String, index: Int, pos: Position }

implement StringCursor {

  fun isEmpty(): Boolean = this.index >= this.raw.size
  fun isNotEmpty(): Boolean = !this.isEmpty()
  fun curr(): Char = this.raw.getCharAt(this.index)
  fun skip(): StringCursor = this{index: this.index + 1, pos: this.pos.increment(this.curr())}
  fun next(): (StringCursor, Char) = {
    (this.skip(), this.curr())
  }
  fun nextEscaped(): (StringCursor, Char) = {
    val (nextCursor, firstChar) = this.next()

    if (firstChar == char'\\') {
      if (nextCursor.isEmpty()) {
        this.pos.fail("Cannot end string with escape char")
      }

      val (finalCursor, nextChar) = nextCursor.next()

      val result = escapes.get(nextChar)

      if (result == null) {
        nextCursor.pos.fail("Invalid escape char")
      } else {
        return (finalCursor, result)
      }
    } else {
      return (nextCursor, firstChar)
    }
  }
}

data Position = { line: Int, col: Int, src: String }

implement Position {
  fun increment(next: Char): Position = if (next == char'\n') this{line: this.line + 1, col: 0} else this{col: this.col + 1}
  fun fail(message: String): Nothing = throw Error.new("$message at ${this.line}:${this.col} in ${this.src}")
}

data TokenWord = { value: String, pos: Position }
data TokenSymbol = { value: String, pos: Position }
data TokenString = { value: String, pos: Position }
data TokenNumber = { value: String, pos: Position }
data TokenEOF = { pos: Position }

type Token = TokenWord | TokenSymbol | TokenString | TokenNumber | TokenEOF

private val lowerCase = 'abcdefghijklmnopqrstuvwxyz'
private val upperCase = lowerCase.toUpperCase()
private val letters = "_$lowerCase$upperCase"
private val digitStart = '0123456789'
private val digitContinue = digitStart.append('.')
private val wordStart = letters
private val wordContinue = letters.append(digitStart)
private val quoteChars = "'\"`"
private val whitespace = '\s\t\r\n'
private val lineComment = '//'
private val blockCommentStart = '/*'
private val blockCommentEnd = '*/'
private val singletonSymbols = '({[]}),;' // these symbols are always alone. They can start but never continue
private val mergedSymbols = '=<>!-+/*:.&|' // these symbols merge with one another to form compound symbols

fun lex(src: String, raw: String): List[Token] = {
  val src = StringCursor{ raw, index: 0, pos: Position{ line: 1, col: 1, src } }

  muncher(src, List.of())
}

fun lexFragment(raw: String, pos: Position): List[Token] = {
  val cursor = StringCursor { raw, index: 0, pos}

  return muncher(cursor, List.of())
}

private fun muncher(src: StringCursor, result: List[Token]): List[Token] = {
  if (src.isEmpty()) return result.add(TokenEOF{pos: src.pos})

  val (nextCursor, nextChar) = src.next()

  match (nextChar) {
    // checking for comments, both block and line
    char'/' when nextCursor.isNotEmpty() && '/*'.contains(nextCursor.curr()) => {
      match (nextCursor.curr()) {
        char'/' => return muncher(munchLineComment(nextCursor), result)
        char'*' => return muncher(munchBlockComment(nextCursor), result)
      }
    }
    // check for number. Do not bother with making sure there is at most one decimal point yet.
    _ when digitStart.contains(nextChar) => {
      val (finalCursor, value) = munchDigit(nextCursor, nextChar.toString())

      return muncher(finalCursor, result.add(TokenNumber {value, pos: nextCursor.pos }))
    }
    // lex any words
    _ when wordStart.contains(nextChar) => {
      val (finalCursor, value) = munchWord(nextCursor, nextChar.toString())

      return muncher(finalCursor, result.add(TokenWord {value, pos: nextCursor.pos }))
    }
    // lex strings of any quote type
    _ when quoteChars.contains(nextChar) => {
      val (finalCursor, value) = munchString(nextCursor, "", nextChar)

      return muncher(finalCursor, result.add(TokenString{ value, pos: nextCursor.pos }))
    }
    // lex singleton symbols
    _ when singletonSymbols.contains(nextChar) => {
      return muncher(nextCursor, result.add(TokenSymbol{ value: nextChar.toString(), pos: nextCursor.pos }))
    }
    // lex symbols
    _ when mergedSymbols.contains(nextChar) => {
      val (finalCursor, value) = munchSymbol(nextCursor, nextChar.toString())

      return muncher(finalCursor, result.add(TokenSymbol{ value, pos: nextCursor.pos }))
    }
    // handle whitespace
    _ when whitespace.contains(nextChar) => {
      return muncher(nextCursor, result)
    }
    _ => src.pos.fail('Unexpected character $nextChar')
  }
}

private fun munchDigit(src: StringCursor, working: String): (StringCursor, String) = munchContinuation(src, working, digitContinue)

fun munchWord(src: StringCursor, working: String): (StringCursor, String) = munchContinuation(src, working, wordContinue)

private fun munchSymbol(src: StringCursor, working: String): (StringCursor, String) = munchContinuation(src, working, mergedSymbols)

private fun munchContinuation(src: StringCursor, working: String, continuation: String): (StringCursor, String) = {
  if (src.isEmpty()) {
    return (src, working)
  }

  val (nextCursor, nextChar) = src.next()

  if (continuation.contains(nextChar)) {
    // tail recursion
    return munchContinuation(nextCursor, working.append(nextChar), continuation)
  } else {
    return (src, working)
  }
}

/**
 * Munch the string, looking for the openType.
 * Do NOT process escapes or interpolation but DO allow escaped chars to pass through.
 */
private fun munchString(src: StringCursor, working: String, openType: Char): (StringCursor, String) = {
  val (nextCursor, nextChar) = src.next()

  // there is one close quote, maybe we are at the end
  match (nextChar) {
    openType => (nextCursor, working)
    char'\\' => { // something is escaped. Don't look at it, just pass both along no matter what.
      val (final, escapedChar) = nextCursor.next()

      return munchString(final, "$working$nextChar$escapedChar", openType)
    }
    _ => return munchString(nextCursor, working.append(nextChar), openType)
  }
}

private fun munchLineComment(src: StringCursor): StringCursor = {
  return doUntil(src, { cur => cur.skip() } , { it => it.curr() == char'\n' })
}

private fun munchBlockComment(src: StringCursor): StringCursor = {
  val finalCursor = doUntil(src, { cur => cur.skip() } , { it =>
    if (it.curr() == char'*' && it.isNotEmpty()) {
      val nextCursor = it.skip()
      nextCursor.curr() == char'/'
    } else {
      false
    }
  })

  finalCursor.skip()
}

private fun doUntil[Item](init: Item, action: { Item -> Item }, test: { Item -> Boolean }): Item =
  if (test(init)) init else return doUntil(action(init), action, test)





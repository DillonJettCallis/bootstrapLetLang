import this/symbols.QualifiedSymbol

/*
 * A type expression represents the declarable types of a variable, argument or function return type
 *
 * example:
 * ```
 * // String is the declared type here
 * val temp: String = ""
 * ```
 *
 * This means that a type expression cannot declare new generic params, it can only use them.
 * It also means that all params and results of a function type expression are required, unlike a lambda impl.
 */

data NamedTypeExp { name: String }
data GenericTypeExp { base: TypeExpression, params: List[TypeExpression] }
data FunctionTypeExp { params: List[TypeExpression], result: TypeExpression, generics: List[String] }
data TupleTypeExp { params: List[TypeExpression] }
data UnionTypeExp { params: Set[TypeExpression] }
data IntersectionTypeExp { params: Set[TypeExpression] }

type TypeExpression
  = NamedTypeExp
  | GenericTypeExp
  | FunctionTypeExp
  | TupleTypeExp
  | UnionTypeExp
  | IntersectionTypeExp




// matching versions of the above, but with fully qualified names
data QualifiedNamedTypeExp { name: QualifiedSymbol }
data QualifiedGenericTypeExp { base: QualifiedTypeExpression, params: List[QualifiedTypeExpression] }
data QualifiedFunctionTypeExp { params: List[QualifiedTypeExpression], result: QualifiedTypeExpression, generics: List[String], vararg: Boolean }
data QualifiedTupleTypeExp { params: List[QualifiedTypeExpression] }
data QualifiedUnionTypeExp { params: Set[QualifiedTypeExpression] }
data QualifiedIntersectionTypeExp { params: Set[QualifiedTypeExpression] }

type QualifiedTypeExpression
  = QualifiedNamedTypeExp
  | QualifiedGenericTypeExp
  | QualifiedFunctionTypeExp
  | QualifiedTupleTypeExp
  | QualifiedUnionTypeExp
  | QualifiedIntersectionTypeExp


fun walkTypeExpressionTree(ex: QualifiedTypeExpression, action: { QualifiedTypeExpression -> QualifiedTypeExpression }): QualifiedTypeExpression = {
  val step = match (ex) {
    _ when ex is QualifiedNamedTypeExp => ex
    _ when ex is QualifiedGenericTypeExp => QualifiedGenericTypeExp {
      base: walkTypeExpressionTree(ex.base, action),
      params: ex.params.map({ it => walkTypeExpressionTree(it, action) })
    }
    _ when ex is QualifiedFunctionTypeExp => ex {
      params: ex.params.map(action),
      result: action(result),
    }
    _ when ex is QualifiedTupleTypeExp => QualifiedTupleTypeExp { params: ex.params.map(action) }
    _ when ex is QualifiedUnionTypeExp => QualifiedUnionTypeExp { params: ex.params.map(action) }
    _ when ex is QualifiedIntersectionTypeExp => QualifiedIntersectionTypeExp { params: ex.params.map(action) }
  };

  return action(step);
}

fun defineThis(ex: QualifiedTypeExpression, thisDef: QualifiedSymbol): QualifiedTypeExpression = {
  val replacement = QualifiedNamedTypeExp { name: thisDef };

  walkTypeExpressionTree(ex, { ex =>
    match (ex) {
      _ when ex is QualifiedNamedTypeExp && ex.name == 'This' => replacement
      _ => ex
    }
  })
}

private fun makeQualifiedUnionType(left: QualifiedTypeExpression, right: QualifiedTypeExpression): QualifiedTypeExpression = {
  if (left == right) {
    return left
  }

  UnionTypeExp { params: unwrapUnionType(left).concat(unwrapUnionType(right)) }
}

private fun unwrapUnionType(type: QualifiedTypeExpression): Set[QualifiedTypeExpression] = if (type is QualifiedUnionTypeExp) type.params else Set.of(type)

// something which is either left or right. Might be the same, might return a union
fun superType(left: QualifiedTypeExpression, right: QualifiedTypeExpression): QualifiedTypeExpression = {
  if (left == right) {
    return left;
  } else {
    return unwrapUnionType(left, right);
  }
}

fun applyIs(base: QualifiedTypeExpression, target: QualifiedTypeExpression): QualifiedTypeExpression = {
  // TODO: in the case of protocols, this might return an intersection instead of replacement
  return target;
}

fun applyIsNot(base: QualifiedTypeExpression, target: QualifiedTypeExpression): QualifiedTypeExpression = {
  // TODO: all we're doing here is removing from a union, there are surely other things we could do
  if (base is QualifiedUnionTypeExp) {
    val removed = base.params.remove(target);

    if (removed.size == 1) {
      removed.toList().get(0)
    } else {
      QualifiedUnionTypeExp { params: removed }
    }
  }
}


